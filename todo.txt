WeeWikiPaint

Minimum Marketable Features:
+ marketing home page (episodes 1-32)
+ single-user painting on home page (episodes 33-200)
* replace home page with professional design (episodes 201+)
- support more browsers (Android, IE10, IE11)
- replace 404 page with professional design
? multiple painting/erasing tools
- collaborative painting
- save the pages (persistence / databases)
- wiki-fy the pages
- more complex painting?
- more collaborative features?

User Stories to finish current MMF:
* Web font
- Polish:
  - Clear button retains focus when drawing (IE8, 9, Chrome)
  - Remove body padding
  - Fix: drawing glitches that occur exiting drawing area that is flush against side of browser
- Release new design

Potential future stories:
- "Try me" text in drawing area
- Responsive design
- Accessibility
- Site monitoring and logging
- Performance
  - Note: serious performance degradation in IE 8 as more lines drawn
- Scalability
- Deploy (including smoke test to ensure that div is in home page)
    (needs to depend on 'build'; just running foreman could give us outdated files)
- Laurent Bourgalt-Roy, E263: fail-fast code (use in devops chapter?)

Engineering Tasks:
* Improve smoke test code
- How do we not test Typekit when we're just testing CSS?

- Need to test arrow's background elements--is there a clean way of doing this?
  - Consider using :before pseudoelement rather than a separate div
  - Consider using Martin Grandrath's CSS triangle trick (see comments E225)
- Need to cache-bust stylesheet and bundle.js
- Manually confirm that styling works cross-platform
- What about alt tags? Semantic markup?
- Need to isolate Safari problem that occurs with getBoundingClientRect and getComputedStyle()
  - See 'create iOS Safari failure' test (ref E229)
- Automatically convert psuedoclasses to regular classes in our tests?

To Do on current task:
* See about improving Selenium performance -- can we leave browser running? Selenium server?
- Start porting over PhantomJS smoke tests

- Uncomment or delete PhantomJS tests in _smoke_test.js
- Should we use Martin Grandrath's event-based solution to font loading (E263 comments)?


Notes:
- NodeUnit default reporter has minor display issue on Windows
