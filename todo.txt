WeeWikiPaint

Minimum Marketable Features:
+ marketing home page (episodes 1-32)
+ single-user painting on home page (episodes 33-200)
* replace home page with professional design (episodes 201+)
- replace 404 page with professional design
- multiple painting/erasing tools
- support more browsers (Android, IE10, IE11)
- collaborative painting
- wiki-fy the pages
- more complex painting?
- more collaborative features?

User Stories to finish current MMF:
* "Clear" and "Join Me" buttons styled properly
- Rounded corners on drawing area
- Drawing area width (including centering & testing cases where drawing area is wider/narrower than browser)
- Drawing area arrow and button need to be above the drawing area
- Web font
- Release new design

Potential future stories:
- "Try me" text in drawing area
- Responsive design
- Site monitoring and logging
- Performance
  - Note: serious performance degradation in IE 8 as more lines drawn
- Scalability
- Deploy (including smoke test to ensure that div is in home page)
    (needs to depend on 'build'; just running foreman could give us outdated files)

Engineering Tasks:
* Implement each design element
- backgroundColorOf() -- how should it deal with hex values? (use assertion style rather than expect style?)
- Test that style sheet is actually being loaded by index.html
- Need to cache-bust stylesheet and bundle.js
- Confirm that styling works cross-platform
- Should isElementCenteredInPage() force element to have a width other than 100%?
- What about alt tags? Semantic markup?
- Fix old test breakage that occurs when changing body margins (don't assume body margins? don't always load CSS?)
- How do we deal with errors related to CSS test HTML and production HTML having different structure?
- Need to test arrow's background elements--is there a clean way of doing this?
  - Consider using :before pseudoelement rather than a separate div
  - Consider using Martin Grandrath's CSS triangle trick (see comments E225)
- Fix ugliness in "center" assertions ("isTextCenteredOnPage"?)
  - Michal Svoboda's E215 comment re centered elements
- Need to isolate Safari problem that occurs with getBoundingClientRect and getComputedStyle()
  - See 'create iOS Safari failure' test (ref E229)
- Automatically convert psuedoclasses to regular classes in our tests?

Goal: expect(css("myHeadline").isCentered()).to.be(true)

To Do on current task:
- Pseudoclasses
  * :hover
  - :active
  - :focus?
  - :visited?
  - :link?
- Is 'join us' text vertically centered correctly?

Notes:
- NodeUnit default reporter has minor display issue on Windows
