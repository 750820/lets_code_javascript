WeeWikiPaint

Minimum Marketable Features:
+ marketing home page (episodes 1-32)
+ single-user painting on home page (episodes 33-200)
* replace home page with professional design (episodes 201+)
- support more browsers (Android, IE10, IE11)
  - iOS 8.1 upgrade broke Mobile Safari tests
  - Firefox and Chrome fail on Windows 8.1 with a touch screen (ref Mattias Ã…slund email, 2 Feb 2015)
    - was not able to reproduce using http://modern.ie VM. Presumably due to lack of touch screen?
- replace 404 page with professional design
? multiple painting/erasing tools
- collaborative painting
- save the pages (persistence / databases)
- wiki-fy the pages
- more complex painting?
- more collaborative features?

User Stories to finish current MMF:
* Web font
- Polish:
  - Clear button retains focus when drawing (IE8, 9, Chrome)
  - Remove body padding
  - Fix: drawing glitches that occur exiting drawing area that is flush against side of browser
  - Need to test arrow's background elements--is there a clean way of doing this?
    - Consider using :before pseudoelement rather than a separate div
    - Consider using Martin Grandrath's CSS triangle trick (see comments E225)
  - Manually confirm that styling works cross-platform
  - What about alt tags? Semantic markup?
- Release new design
  - Need to cache-bust stylesheet and bundle.js

Engineering Tasks:
* Migrate from Expect.js to a better assertion library
- General cleanup of build script
  - Move .lint files to 'incremental' dir, preserve '.js' extension (suggested by Jay Bazuzi, E282 comments)
  - Use automatopia ideas
  - Clean up -T output
  - Fix duplicate 'BUILD OK' when running default build
  - Move vendor directory to more convenient location?
  - Need better of dealing with shared and vendor files' dependency
    - currently, they're duplicated in clientFiles() & serverFiles()
  - Clean up CI script?
- Add HTML validation / linting?
- How do we not test Typekit when we're just testing CSS?

To Do on current task:
* Migrate client code
  - _svg_canvas_test.js


Potential future stories:
- "Try me" text in drawing area
- Responsive design
- Accessibility
- Site monitoring and logging
- Performance
  - Note: serious performance degradation in IE 8 as more lines drawn
- Scalability
- Deploy (including smoke test to ensure that div is in home page)
    (needs to depend on 'build'; just running foreman could give us outdated files)
- Laurent Bourgalt-Roy, E263: fail-fast code (use in devops chapter?)
