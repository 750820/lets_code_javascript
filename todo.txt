WeeWikiPaint

Minimum Marketable Features:
* single-user painting on home page
- collaborative painting
- wiki-fy the pages
- more complex painting?
- more collaborative features?

User Stories:
* Draw a line in response to iOS touch
- Deploy (including smoke test to ensure that div is in home page)

Engineering Tasks:
- Spike touch events
- test-driven basic touch events
- consider special cases

- Modify Lint settings for client global variables (off-camera)
- click tracking needs to account for margin, border, and padding
  - figure out how to factor out common setup code
  - test that em is converted px

To Do on current task:
- BEFORE RECORDING: version checking breaks when using "-pre" (Thx Daniel Auger, http://www.letscodejavascript.com/v3/comments/live/16#comment-795147187)
- Mention updates to Davide Molin's 'watch' script
- Use mouseleave event to draw line to edge when mouse moving quickly? (Thx Danny Jones, E67)

Future ideas:
- Create 'fail fast' assertion code
- Abstract test framework? (Swap out a different framework to make sure abstraction works)
- Static checking of function parameters (rather than writing tests)
- Handle errors properly in server.js
- server.stop() waits for open connections to close (e.g., Firefox keeps open connection).
  Make it forcibly close?
- Remove Node version duplication between package.json and Jakefile.js
- Fix httpGet duplication
- Automated npm rebuild ('npm rebuild' in jake.sh / jake.bat if .bin directory not found.)
- Ensure that every browser has same of number of tests running
- Automatically start Testacular (or provide friendlier error message when it isn't running?)
- Automate CI script
- Resolve npm 'extraneous' warning (due to package.json not reflecting what's in node_modules)
- Convert 'client' to be proper object rather than global singleton?

Notes:
- NodeUnit default reporter has minor display issue on Windows
