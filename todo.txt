WeeWikiPaint

Minimum Marketable Features:
* single-user painting on home page
- collaborative painting
- wiki-fy the pages
- more complex painting?
- more collaborative features?

User Stories:
* Create empty drawing area
- Draw one line (pre-defined)
- Draw a line in response to user mouse
- Draw a line in response to iOS touch
- Draw multiple lines / follow the drag
- Minify and deploy

Engineering Tasks:
* Create drawing area using Raphael
- Smoke test to ensure that our magic div is in our actual home page

To Do on current task:
- Respect dimensions of enclosing div
- Figure out how to get dimensions of Raphael paper
- Factor out common elements in our client tests
- Modify Lint settings for client global variables

Future ideas:
- Create 'fail fast' assertion code
- Abstract test framework? (Swap out a different framework to make sure abstraction works)
- Static checking of function parameters (rather than writing tests)
- Handle errors properly in server.js
- server.stop() waits for open connections to close (e.g., Firefox keeps open connection).
  Make it forcibly close?
- Remove Node version duplication between package.json and Jakefile.js
- Fix httpGet duplication
- Automated npm rebuild ('npm rebuild' in jake.sh / jake.bat if .bin directory not found.)
- Ensure that every browser has same of number of tests running
- Automatically start Testacular (or provide friendlier error message when it isn't running?)
- Automate CI script
- Resolve npm 'extraneous' warning (due to package.json not reflecting what's in node_modules)

Notes:
- NodeUnit default reporter has minor display issue on Windows
