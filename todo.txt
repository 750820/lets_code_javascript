WeeWikiPaint

BRANCH: spike_socket_io_race_condition

The purpose of this branch is to debug a race condition in the tests for server-side Socket.IO code. We were seeing an issue where tests would fail, timeout, or hang sporadically.

The tests in question are in _real_time_server_test.js. To run them, run `./jake.sh clean testServer`. Most of the rest of the code has been deleted and so other Jake targets are broken.

This turned out to be due to two issues:

1) Our test would open a Socket.IO connection to the server, wait for the socket to connect on the server, and then close the socket on the client BEFORE the server told the client it was connected. The client would close the socket, never inform the server (because it didn't think the socket had ever connected), and the server-side socket would be left hanging. This would prevent the server from shutting down which would cause the tests to hang.

Issue #1 was fixed by modifying the test to wait for tests' createSocket() call to take a callback. The callback would only be called after the client received the "connected" event. By waiting to close the socket on the client until *after* the callback was called, the socket would never be closed on the client before the client knew it was connected.

2) After fixing issue #1, we encountered a new problem. When we called closeSocket(), the tests' afterEach() method would timeout inside of the httpServer.stop() call. We logged the HTTP connect and disconnect events and discovered that, when closeSocket() was called in the test, Socket.IO was opening several HTTP connections to the server (presumably to communicate that the Socket.IO virtual connection should be closed), but one of them wasn't being closed.

We haven't yet resolved this. Current best guess is that it's a bug in Socket.IO.

TO DO:
* Reproduce issue #2 in a standalone test case
	- Submit to Socket.IO
	- Debug Socket.IO to see if this if there's a workaround. (Can we use Engine.IO instead?)